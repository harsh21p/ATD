// Generated by view binder compiler. Do not edit!
package com.atd.atdmobileapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.atd.atdmobileapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCheckoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout clHeader;

  @NonNull
  public final ConstraintLayout clHeader1;

  @NonNull
  public final ConstraintLayout clLocationLayout;

  @NonNull
  public final EditText etComments;

  @NonNull
  public final EditText etConsumerName;

  @NonNull
  public final EditText etPoNumber;

  @NonNull
  public final ImageView ivBack;

  @NonNull
  public final ImageView ivCity;

  @NonNull
  public final ImageView ivFreightCheck;

  @NonNull
  public final ImageView ivPoError;

  @NonNull
  public final LinearLayout llFreight;

  @NonNull
  public final LinearLayout llItemQuantity;

  @NonNull
  public final LinearLayout llSubTotal;

  @NonNull
  public final LinearLayout llSumTotal;

  @NonNull
  public final LinearLayout llTotal;

  @NonNull
  public final ConstraintLayout nestedConstraint;

  @NonNull
  public final ScrollView productScrollView;

  @NonNull
  public final ProgressBar progressbar;

  @NonNull
  public final TextView tvCity;

  @NonNull
  public final TextView tvComments;

  @NonNull
  public final TextView tvConsumerName;

  @NonNull
  public final TextView tvDetail;

  @NonNull
  public final TextView tvFreight;

  @NonNull
  public final TextView tvFreightCheckMsg;

  @NonNull
  public final TextView tvFreightMsg;

  @NonNull
  public final TextView tvLocationAddress;

  @NonNull
  public final TextView tvLocationNumber;

  @NonNull
  public final TextView tvPlaceOrder;

  @NonNull
  public final TextView tvPoErrorMsg;

  @NonNull
  public final TextView tvPoNumber;

  @NonNull
  public final TextView tvSubtotalValue;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView tvTotalQty;

  @NonNull
  public final TextView tvTotalValue;

  @NonNull
  public final View viewConsumerName;

  @NonNull
  public final View viewFees;

  @NonNull
  public final View viewPoNumber;

  private FragmentCheckoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout clHeader, @NonNull ConstraintLayout clHeader1,
      @NonNull ConstraintLayout clLocationLayout, @NonNull EditText etComments,
      @NonNull EditText etConsumerName, @NonNull EditText etPoNumber, @NonNull ImageView ivBack,
      @NonNull ImageView ivCity, @NonNull ImageView ivFreightCheck, @NonNull ImageView ivPoError,
      @NonNull LinearLayout llFreight, @NonNull LinearLayout llItemQuantity,
      @NonNull LinearLayout llSubTotal, @NonNull LinearLayout llSumTotal,
      @NonNull LinearLayout llTotal, @NonNull ConstraintLayout nestedConstraint,
      @NonNull ScrollView productScrollView, @NonNull ProgressBar progressbar,
      @NonNull TextView tvCity, @NonNull TextView tvComments, @NonNull TextView tvConsumerName,
      @NonNull TextView tvDetail, @NonNull TextView tvFreight, @NonNull TextView tvFreightCheckMsg,
      @NonNull TextView tvFreightMsg, @NonNull TextView tvLocationAddress,
      @NonNull TextView tvLocationNumber, @NonNull TextView tvPlaceOrder,
      @NonNull TextView tvPoErrorMsg, @NonNull TextView tvPoNumber,
      @NonNull TextView tvSubtotalValue, @NonNull TextView tvTitle, @NonNull TextView tvTotalQty,
      @NonNull TextView tvTotalValue, @NonNull View viewConsumerName, @NonNull View viewFees,
      @NonNull View viewPoNumber) {
    this.rootView = rootView;
    this.clHeader = clHeader;
    this.clHeader1 = clHeader1;
    this.clLocationLayout = clLocationLayout;
    this.etComments = etComments;
    this.etConsumerName = etConsumerName;
    this.etPoNumber = etPoNumber;
    this.ivBack = ivBack;
    this.ivCity = ivCity;
    this.ivFreightCheck = ivFreightCheck;
    this.ivPoError = ivPoError;
    this.llFreight = llFreight;
    this.llItemQuantity = llItemQuantity;
    this.llSubTotal = llSubTotal;
    this.llSumTotal = llSumTotal;
    this.llTotal = llTotal;
    this.nestedConstraint = nestedConstraint;
    this.productScrollView = productScrollView;
    this.progressbar = progressbar;
    this.tvCity = tvCity;
    this.tvComments = tvComments;
    this.tvConsumerName = tvConsumerName;
    this.tvDetail = tvDetail;
    this.tvFreight = tvFreight;
    this.tvFreightCheckMsg = tvFreightCheckMsg;
    this.tvFreightMsg = tvFreightMsg;
    this.tvLocationAddress = tvLocationAddress;
    this.tvLocationNumber = tvLocationNumber;
    this.tvPlaceOrder = tvPlaceOrder;
    this.tvPoErrorMsg = tvPoErrorMsg;
    this.tvPoNumber = tvPoNumber;
    this.tvSubtotalValue = tvSubtotalValue;
    this.tvTitle = tvTitle;
    this.tvTotalQty = tvTotalQty;
    this.tvTotalValue = tvTotalValue;
    this.viewConsumerName = viewConsumerName;
    this.viewFees = viewFees;
    this.viewPoNumber = viewPoNumber;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCheckoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCheckoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_checkout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCheckoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clHeader;
      ConstraintLayout clHeader = ViewBindings.findChildViewById(rootView, id);
      if (clHeader == null) {
        break missingId;
      }

      id = R.id.clHeader;
      ConstraintLayout clHeader1 = ViewBindings.findChildViewById(rootView, id);
      if (clHeader1 == null) {
        break missingId;
      }

      id = R.id.clLocationLayout;
      ConstraintLayout clLocationLayout = ViewBindings.findChildViewById(rootView, id);
      if (clLocationLayout == null) {
        break missingId;
      }

      id = R.id.etComments;
      EditText etComments = ViewBindings.findChildViewById(rootView, id);
      if (etComments == null) {
        break missingId;
      }

      id = R.id.etConsumerName;
      EditText etConsumerName = ViewBindings.findChildViewById(rootView, id);
      if (etConsumerName == null) {
        break missingId;
      }

      id = R.id.etPoNumber;
      EditText etPoNumber = ViewBindings.findChildViewById(rootView, id);
      if (etPoNumber == null) {
        break missingId;
      }

      id = R.id.ivBack;
      ImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.ivCity;
      ImageView ivCity = ViewBindings.findChildViewById(rootView, id);
      if (ivCity == null) {
        break missingId;
      }

      id = R.id.ivFreightCheck;
      ImageView ivFreightCheck = ViewBindings.findChildViewById(rootView, id);
      if (ivFreightCheck == null) {
        break missingId;
      }

      id = R.id.ivPoError;
      ImageView ivPoError = ViewBindings.findChildViewById(rootView, id);
      if (ivPoError == null) {
        break missingId;
      }

      id = R.id.llFreight;
      LinearLayout llFreight = ViewBindings.findChildViewById(rootView, id);
      if (llFreight == null) {
        break missingId;
      }

      id = R.id.llItemQuantity;
      LinearLayout llItemQuantity = ViewBindings.findChildViewById(rootView, id);
      if (llItemQuantity == null) {
        break missingId;
      }

      id = R.id.llSubTotal;
      LinearLayout llSubTotal = ViewBindings.findChildViewById(rootView, id);
      if (llSubTotal == null) {
        break missingId;
      }

      id = R.id.llSumTotal;
      LinearLayout llSumTotal = ViewBindings.findChildViewById(rootView, id);
      if (llSumTotal == null) {
        break missingId;
      }

      id = R.id.llTotal;
      LinearLayout llTotal = ViewBindings.findChildViewById(rootView, id);
      if (llTotal == null) {
        break missingId;
      }

      id = R.id.nested_constraint;
      ConstraintLayout nestedConstraint = ViewBindings.findChildViewById(rootView, id);
      if (nestedConstraint == null) {
        break missingId;
      }

      id = R.id.product_scroll_view;
      ScrollView productScrollView = ViewBindings.findChildViewById(rootView, id);
      if (productScrollView == null) {
        break missingId;
      }

      id = R.id.progressbar;
      ProgressBar progressbar = ViewBindings.findChildViewById(rootView, id);
      if (progressbar == null) {
        break missingId;
      }

      id = R.id.tvCity;
      TextView tvCity = ViewBindings.findChildViewById(rootView, id);
      if (tvCity == null) {
        break missingId;
      }

      id = R.id.tvComments;
      TextView tvComments = ViewBindings.findChildViewById(rootView, id);
      if (tvComments == null) {
        break missingId;
      }

      id = R.id.tvConsumerName;
      TextView tvConsumerName = ViewBindings.findChildViewById(rootView, id);
      if (tvConsumerName == null) {
        break missingId;
      }

      id = R.id.tvDetail;
      TextView tvDetail = ViewBindings.findChildViewById(rootView, id);
      if (tvDetail == null) {
        break missingId;
      }

      id = R.id.tvFreight;
      TextView tvFreight = ViewBindings.findChildViewById(rootView, id);
      if (tvFreight == null) {
        break missingId;
      }

      id = R.id.tvFreightCheckMsg;
      TextView tvFreightCheckMsg = ViewBindings.findChildViewById(rootView, id);
      if (tvFreightCheckMsg == null) {
        break missingId;
      }

      id = R.id.tvFreightMsg;
      TextView tvFreightMsg = ViewBindings.findChildViewById(rootView, id);
      if (tvFreightMsg == null) {
        break missingId;
      }

      id = R.id.tvLocationAddress;
      TextView tvLocationAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvLocationAddress == null) {
        break missingId;
      }

      id = R.id.tvLocationNumber;
      TextView tvLocationNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvLocationNumber == null) {
        break missingId;
      }

      id = R.id.tvPlaceOrder;
      TextView tvPlaceOrder = ViewBindings.findChildViewById(rootView, id);
      if (tvPlaceOrder == null) {
        break missingId;
      }

      id = R.id.tvPoErrorMsg;
      TextView tvPoErrorMsg = ViewBindings.findChildViewById(rootView, id);
      if (tvPoErrorMsg == null) {
        break missingId;
      }

      id = R.id.tvPoNumber;
      TextView tvPoNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvPoNumber == null) {
        break missingId;
      }

      id = R.id.tvSubtotalValue;
      TextView tvSubtotalValue = ViewBindings.findChildViewById(rootView, id);
      if (tvSubtotalValue == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      id = R.id.tvTotalQty;
      TextView tvTotalQty = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalQty == null) {
        break missingId;
      }

      id = R.id.tvTotalValue;
      TextView tvTotalValue = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalValue == null) {
        break missingId;
      }

      id = R.id.viewConsumerName;
      View viewConsumerName = ViewBindings.findChildViewById(rootView, id);
      if (viewConsumerName == null) {
        break missingId;
      }

      id = R.id.viewFees;
      View viewFees = ViewBindings.findChildViewById(rootView, id);
      if (viewFees == null) {
        break missingId;
      }

      id = R.id.viewPoNumber;
      View viewPoNumber = ViewBindings.findChildViewById(rootView, id);
      if (viewPoNumber == null) {
        break missingId;
      }

      return new FragmentCheckoutBinding((ConstraintLayout) rootView, clHeader, clHeader1,
          clLocationLayout, etComments, etConsumerName, etPoNumber, ivBack, ivCity, ivFreightCheck,
          ivPoError, llFreight, llItemQuantity, llSubTotal, llSumTotal, llTotal, nestedConstraint,
          productScrollView, progressbar, tvCity, tvComments, tvConsumerName, tvDetail, tvFreight,
          tvFreightCheckMsg, tvFreightMsg, tvLocationAddress, tvLocationNumber, tvPlaceOrder,
          tvPoErrorMsg, tvPoNumber, tvSubtotalValue, tvTitle, tvTotalQty, tvTotalValue,
          viewConsumerName, viewFees, viewPoNumber);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
