// Generated by view binder compiler. Do not edit!
package com.atd.atdmobileapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.atd.atdmobileapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTiresBrandBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout clApply;

  @NonNull
  public final RelativeLayout expandableLayoutOtherBrand;

  @NonNull
  public final RelativeLayout expandableLayoutPreferredBrand;

  @NonNull
  public final ConstraintLayout forOBrands;

  @NonNull
  public final ConstraintLayout forPFBrands;

  @NonNull
  public final ImageView ivClose;

  @NonNull
  public final ImageView ivOtherBrands;

  @NonNull
  public final ImageView ivPreferredBrand;

  @NonNull
  public final LinearLayoutCompat llBrandsHeader;

  @NonNull
  public final ConstraintLayout llBrandsList;

  @NonNull
  public final LinearLayoutCompat llOtherBrands;

  @NonNull
  public final LinearLayoutCompat llPreferredBrands;

  @NonNull
  public final LinearLayoutCompat llSearchLocation;

  @NonNull
  public final RecyclerView rvOtherBrand;

  @NonNull
  public final RecyclerView rvPreferredBrand;

  @NonNull
  public final SearchHeaderBinding searchHeader;

  @NonNull
  public final TextView tvApply;

  @NonNull
  public final TextView tvBrands;

  @NonNull
  public final TextView tvClearAll;

  @NonNull
  public final TextView tvOtherBrand;

  @NonNull
  public final TextView tvPreferredBrand;

  @NonNull
  public final TextView tvRetrySearchMessageOtherBrand;

  @NonNull
  public final TextView tvRetrySearchMessagePrefBrand;

  @NonNull
  public final TextView tvSearchTitle;

  @NonNull
  public final View view;

  @NonNull
  public final View viewBrands;

  @NonNull
  public final View viewSelectLocation;

  private FragmentTiresBrandBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout clApply, @NonNull RelativeLayout expandableLayoutOtherBrand,
      @NonNull RelativeLayout expandableLayoutPreferredBrand, @NonNull ConstraintLayout forOBrands,
      @NonNull ConstraintLayout forPFBrands, @NonNull ImageView ivClose,
      @NonNull ImageView ivOtherBrands, @NonNull ImageView ivPreferredBrand,
      @NonNull LinearLayoutCompat llBrandsHeader, @NonNull ConstraintLayout llBrandsList,
      @NonNull LinearLayoutCompat llOtherBrands, @NonNull LinearLayoutCompat llPreferredBrands,
      @NonNull LinearLayoutCompat llSearchLocation, @NonNull RecyclerView rvOtherBrand,
      @NonNull RecyclerView rvPreferredBrand, @NonNull SearchHeaderBinding searchHeader,
      @NonNull TextView tvApply, @NonNull TextView tvBrands, @NonNull TextView tvClearAll,
      @NonNull TextView tvOtherBrand, @NonNull TextView tvPreferredBrand,
      @NonNull TextView tvRetrySearchMessageOtherBrand,
      @NonNull TextView tvRetrySearchMessagePrefBrand, @NonNull TextView tvSearchTitle,
      @NonNull View view, @NonNull View viewBrands, @NonNull View viewSelectLocation) {
    this.rootView = rootView;
    this.clApply = clApply;
    this.expandableLayoutOtherBrand = expandableLayoutOtherBrand;
    this.expandableLayoutPreferredBrand = expandableLayoutPreferredBrand;
    this.forOBrands = forOBrands;
    this.forPFBrands = forPFBrands;
    this.ivClose = ivClose;
    this.ivOtherBrands = ivOtherBrands;
    this.ivPreferredBrand = ivPreferredBrand;
    this.llBrandsHeader = llBrandsHeader;
    this.llBrandsList = llBrandsList;
    this.llOtherBrands = llOtherBrands;
    this.llPreferredBrands = llPreferredBrands;
    this.llSearchLocation = llSearchLocation;
    this.rvOtherBrand = rvOtherBrand;
    this.rvPreferredBrand = rvPreferredBrand;
    this.searchHeader = searchHeader;
    this.tvApply = tvApply;
    this.tvBrands = tvBrands;
    this.tvClearAll = tvClearAll;
    this.tvOtherBrand = tvOtherBrand;
    this.tvPreferredBrand = tvPreferredBrand;
    this.tvRetrySearchMessageOtherBrand = tvRetrySearchMessageOtherBrand;
    this.tvRetrySearchMessagePrefBrand = tvRetrySearchMessagePrefBrand;
    this.tvSearchTitle = tvSearchTitle;
    this.view = view;
    this.viewBrands = viewBrands;
    this.viewSelectLocation = viewSelectLocation;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTiresBrandBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTiresBrandBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tires_brand, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTiresBrandBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clApply;
      ConstraintLayout clApply = ViewBindings.findChildViewById(rootView, id);
      if (clApply == null) {
        break missingId;
      }

      id = R.id.expandableLayoutOtherBrand;
      RelativeLayout expandableLayoutOtherBrand = ViewBindings.findChildViewById(rootView, id);
      if (expandableLayoutOtherBrand == null) {
        break missingId;
      }

      id = R.id.expandableLayoutPreferredBrand;
      RelativeLayout expandableLayoutPreferredBrand = ViewBindings.findChildViewById(rootView, id);
      if (expandableLayoutPreferredBrand == null) {
        break missingId;
      }

      id = R.id.forOBrands;
      ConstraintLayout forOBrands = ViewBindings.findChildViewById(rootView, id);
      if (forOBrands == null) {
        break missingId;
      }

      id = R.id.forPFBrands;
      ConstraintLayout forPFBrands = ViewBindings.findChildViewById(rootView, id);
      if (forPFBrands == null) {
        break missingId;
      }

      id = R.id.ivClose;
      ImageView ivClose = ViewBindings.findChildViewById(rootView, id);
      if (ivClose == null) {
        break missingId;
      }

      id = R.id.ivOtherBrands;
      ImageView ivOtherBrands = ViewBindings.findChildViewById(rootView, id);
      if (ivOtherBrands == null) {
        break missingId;
      }

      id = R.id.ivPreferredBrand;
      ImageView ivPreferredBrand = ViewBindings.findChildViewById(rootView, id);
      if (ivPreferredBrand == null) {
        break missingId;
      }

      id = R.id.llBrandsHeader;
      LinearLayoutCompat llBrandsHeader = ViewBindings.findChildViewById(rootView, id);
      if (llBrandsHeader == null) {
        break missingId;
      }

      id = R.id.llBrandsList;
      ConstraintLayout llBrandsList = ViewBindings.findChildViewById(rootView, id);
      if (llBrandsList == null) {
        break missingId;
      }

      id = R.id.llOtherBrands;
      LinearLayoutCompat llOtherBrands = ViewBindings.findChildViewById(rootView, id);
      if (llOtherBrands == null) {
        break missingId;
      }

      id = R.id.llPreferredBrands;
      LinearLayoutCompat llPreferredBrands = ViewBindings.findChildViewById(rootView, id);
      if (llPreferredBrands == null) {
        break missingId;
      }

      id = R.id.llSearchLocation;
      LinearLayoutCompat llSearchLocation = ViewBindings.findChildViewById(rootView, id);
      if (llSearchLocation == null) {
        break missingId;
      }

      id = R.id.rvOtherBrand;
      RecyclerView rvOtherBrand = ViewBindings.findChildViewById(rootView, id);
      if (rvOtherBrand == null) {
        break missingId;
      }

      id = R.id.rvPreferredBrand;
      RecyclerView rvPreferredBrand = ViewBindings.findChildViewById(rootView, id);
      if (rvPreferredBrand == null) {
        break missingId;
      }

      id = R.id.searchHeader;
      View searchHeader = ViewBindings.findChildViewById(rootView, id);
      if (searchHeader == null) {
        break missingId;
      }
      SearchHeaderBinding binding_searchHeader = SearchHeaderBinding.bind(searchHeader);

      id = R.id.tvApply;
      TextView tvApply = ViewBindings.findChildViewById(rootView, id);
      if (tvApply == null) {
        break missingId;
      }

      id = R.id.tvBrands;
      TextView tvBrands = ViewBindings.findChildViewById(rootView, id);
      if (tvBrands == null) {
        break missingId;
      }

      id = R.id.tvClearAll;
      TextView tvClearAll = ViewBindings.findChildViewById(rootView, id);
      if (tvClearAll == null) {
        break missingId;
      }

      id = R.id.tvOtherBrand;
      TextView tvOtherBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvOtherBrand == null) {
        break missingId;
      }

      id = R.id.tvPreferredBrand;
      TextView tvPreferredBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvPreferredBrand == null) {
        break missingId;
      }

      id = R.id.tvRetrySearchMessageOtherBrand;
      TextView tvRetrySearchMessageOtherBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvRetrySearchMessageOtherBrand == null) {
        break missingId;
      }

      id = R.id.tvRetrySearchMessagePrefBrand;
      TextView tvRetrySearchMessagePrefBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvRetrySearchMessagePrefBrand == null) {
        break missingId;
      }

      id = R.id.tvSearchTitle;
      TextView tvSearchTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvSearchTitle == null) {
        break missingId;
      }

      id = R.id.view;
      View view = ViewBindings.findChildViewById(rootView, id);
      if (view == null) {
        break missingId;
      }

      id = R.id.viewBrands;
      View viewBrands = ViewBindings.findChildViewById(rootView, id);
      if (viewBrands == null) {
        break missingId;
      }

      id = R.id.viewSelectLocation;
      View viewSelectLocation = ViewBindings.findChildViewById(rootView, id);
      if (viewSelectLocation == null) {
        break missingId;
      }

      return new FragmentTiresBrandBinding((ConstraintLayout) rootView, clApply,
          expandableLayoutOtherBrand, expandableLayoutPreferredBrand, forOBrands, forPFBrands,
          ivClose, ivOtherBrands, ivPreferredBrand, llBrandsHeader, llBrandsList, llOtherBrands,
          llPreferredBrands, llSearchLocation, rvOtherBrand, rvPreferredBrand, binding_searchHeader,
          tvApply, tvBrands, tvClearAll, tvOtherBrand, tvPreferredBrand,
          tvRetrySearchMessageOtherBrand, tvRetrySearchMessagePrefBrand, tvSearchTitle, view,
          viewBrands, viewSelectLocation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
