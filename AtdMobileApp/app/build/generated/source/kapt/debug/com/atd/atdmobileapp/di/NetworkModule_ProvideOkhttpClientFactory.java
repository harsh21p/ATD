// Generated by Dagger (https://dagger.dev).
package com.atd.atdmobileapp.di;

import com.atd.atdmobileapp.api.AuthInterceptor;
import com.atd.atdmobileapp.utils.CertificateHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkhttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<AuthInterceptor> authInterceptorProvider;

  private final Provider<CertificateHelper> certificateHelperProvider;

  public NetworkModule_ProvideOkhttpClientFactory(NetworkModule module,
      Provider<AuthInterceptor> authInterceptorProvider,
      Provider<CertificateHelper> certificateHelperProvider) {
    this.module = module;
    this.authInterceptorProvider = authInterceptorProvider;
    this.certificateHelperProvider = certificateHelperProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkhttpClient(module, authInterceptorProvider.get(), certificateHelperProvider.get());
  }

  public static NetworkModule_ProvideOkhttpClientFactory create(NetworkModule module,
      Provider<AuthInterceptor> authInterceptorProvider,
      Provider<CertificateHelper> certificateHelperProvider) {
    return new NetworkModule_ProvideOkhttpClientFactory(module, authInterceptorProvider, certificateHelperProvider);
  }

  public static OkHttpClient provideOkhttpClient(NetworkModule instance,
      AuthInterceptor authInterceptor, CertificateHelper certificateHelper) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkhttpClient(authInterceptor, certificateHelper));
  }
}
