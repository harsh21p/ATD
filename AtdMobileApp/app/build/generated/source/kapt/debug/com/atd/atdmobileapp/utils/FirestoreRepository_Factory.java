// Generated by Dagger (https://dagger.dev).
package com.atd.atdmobileapp.utils;

import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirestoreRepository_Factory implements Factory<FirestoreRepository> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<SharedPrefManager> sharedPrefManagerProvider;

  public FirestoreRepository_Factory(Provider<FirebaseFirestore> firestoreProvider,
      Provider<SharedPrefManager> sharedPrefManagerProvider) {
    this.firestoreProvider = firestoreProvider;
    this.sharedPrefManagerProvider = sharedPrefManagerProvider;
  }

  @Override
  public FirestoreRepository get() {
    return newInstance(firestoreProvider.get(), sharedPrefManagerProvider.get());
  }

  public static FirestoreRepository_Factory create(Provider<FirebaseFirestore> firestoreProvider,
      Provider<SharedPrefManager> sharedPrefManagerProvider) {
    return new FirestoreRepository_Factory(firestoreProvider, sharedPrefManagerProvider);
  }

  public static FirestoreRepository newInstance(FirebaseFirestore firestore,
      SharedPrefManager sharedPrefManager) {
    return new FirestoreRepository(firestore, sharedPrefManager);
  }
}
