// Generated by Dagger (https://dagger.dev).
package com.atd.atdmobileapp.utils;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationScheduler_Factory implements Factory<NotificationScheduler> {
  private final Provider<Context> contextProvider;

  private final Provider<SharedPrefManager> sharedPrefManagerProvider;

  private final Provider<FirestoreRepository> firestoreRepositoryProvider;

  public NotificationScheduler_Factory(Provider<Context> contextProvider,
      Provider<SharedPrefManager> sharedPrefManagerProvider,
      Provider<FirestoreRepository> firestoreRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.sharedPrefManagerProvider = sharedPrefManagerProvider;
    this.firestoreRepositoryProvider = firestoreRepositoryProvider;
  }

  @Override
  public NotificationScheduler get() {
    return newInstance(contextProvider.get(), sharedPrefManagerProvider.get(), firestoreRepositoryProvider.get());
  }

  public static NotificationScheduler_Factory create(Provider<Context> contextProvider,
      Provider<SharedPrefManager> sharedPrefManagerProvider,
      Provider<FirestoreRepository> firestoreRepositoryProvider) {
    return new NotificationScheduler_Factory(contextProvider, sharedPrefManagerProvider, firestoreRepositoryProvider);
  }

  public static NotificationScheduler newInstance(Context context,
      SharedPrefManager sharedPrefManager, FirestoreRepository firestoreRepository) {
    return new NotificationScheduler(context, sharedPrefManager, firestoreRepository);
  }
}
